#   para ajustar un conjunto de datos
#
#           Autor:
#   David Osvaldo Chay May 
#   may876518@gmail.com
#   Version 1.1 : 14/04/2025 -

import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import interp1d
from tabulate import tabulate

# Datos experimentales de la deflexión
longitud = np.array([0.0, 1.0, 2.0, 3.0, 4.0, 5.0])
deflexion = np.array([0.0, -1.5, -2.8, -3.0, -2.7, -2.0])

# Crear interpolaciones
lineal = interp1d(longitud, deflexion, kind='linear')
cuadratica = interp1d(longitud, deflexion, kind='quadratic')
cubica = interp1d(longitud, deflexion, kind='cubic')

# Evaluar en puntos cada 0.5 m
x_eval = np.linspace(0, 5, 11)
y_lineal = lineal(x_eval)
y_cuadratica = cuadratica(x_eval)
y_cubica = cubica(x_eval)

# Crear tabla con resultados
tabla = []
for i in range(len(x_eval)):
    tabla.append([
        f"{x_eval[i]:.1f}",
        f"{y_lineal[i]:.4f}",
        f"{y_cuadratica[i]:.4f}",
        f"{y_cubica[i]:.4f}"
    ])

# Mostrar resultados en tabla
headers = ["Longitud (m)", "Lineal", "Cuadrática", "Cúbica"]
print("\nTabla comparativa de interpolaciones:")
print(tabulate(tabla, headers=headers, tablefmt="pipe"))

# Graficar resultados
x_vals = np.linspace(0, 5, 200)
plt.figure(figsize=(10, 6))
plt.scatter(longitud, deflexion, color='red', label='Datos experimentales')
plt.plot(x_vals, lineal(x_vals), '--', label='Interpolación Lineal', color='blue')
plt.plot(x_vals, cuadratica(x_vals), '-.', label='Interpolación Cuadrática', color='green')
plt.plot(x_vals, cubica(x_vals), label='Interpolación Cúbica', color='purple')
plt.xlabel('Longitud (m)')
plt.ylabel('Deflexión (mm)')
plt.title('Interpolación de Deflexión en una Viga')
plt.grid(True)
plt.legend()
plt.savefig('deflexion_interpolada.png')
plt.show()
